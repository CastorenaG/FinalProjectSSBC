# -*- coding: utf-8 -*-
"""Proyecto Final KNN Employee.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17VbUZak_N_CHGyWt03wOChylg_lCuI-S
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("/content/drive/MyDrive/ProyectoFinalSemBasCon/Employee.csv")

# Codificar las variables categóricas
df['Education'] = df['Education'].map({'Bachelors': 0, 'Masters': 1, 'PHD': 2})
df['City'] = df['City'].map({'Pune': 0, 'New Delhi': 1, 'Bangalore': 2})
df['Gender'] = df['Gender'].map({'Female': 0, 'Male': 1})
df['EverBenched'] = df['EverBenched'].map({'No': 0, 'Yes': 1})

# Agregar una columna de unos para el sesgo (bias)
df["bias"] = 1

# Definir la función de distancia euclidiana
def euclidean_distance(x1, x2):
    return np.sqrt(np.sum((x1 - x2)**2))

# Definir la función k-NN para una sola instancia
def knn_predict(data, test_instance, k):
    distances = []
    for i in range(len(data)):
        x_data = data.iloc[i, :-1].values  # Todas las características excepto la última columna
        distance = euclidean_distance(test_instance, x_data)
        distances.append((distance, data.iloc[i, -1]))  # Tupla de (distancia, clase)
    distances = sorted(distances, key=lambda x: x[0])[:k]  # Ordenar y seleccionar los k vecinos más cercanos
    neighbors = [neighbor[1] for neighbor in distances]  # Obtener las clases de los vecinos
    return max(set(neighbors), key=neighbors.count)  # Votación para la clase más frecuente

# Definir la función k-NN para el conjunto de datos completo
def knn_predict_batch(data, k):
    predictions = []
    for i in range(len(data)):
        test_instance = data.iloc[i, :-1].values
        prediction = knn_predict(data, test_instance, k)
        predictions.append(prediction)
    return predictions

# Definir el valor de k (número de vecinos)
k_value = 3

# Realizar predicciones en el conjunto de datos completo
predictions = knn_predict_batch(df, k_value)

# Evaluación del modelo (métricas de evaluación)
y_data = df["LeaveOrNot"].to_numpy()
accuracy = np.mean(predictions == y_data)
print("Precisión del modelo:", accuracy)
# Convertir la lista de predicciones a un array de numpy
predictions = np.array(predictions)